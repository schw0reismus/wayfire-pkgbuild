Submodule subprojects/dbus c705bf1..c7cc8e1:
diff --git a/subprojects/dbus/README.md b/subprojects/dbus/README.md
index 6c8a94c..dc39837 100644
--- a/subprojects/dbus/README.md
+++ b/subprojects/dbus/README.md
@@ -5,8 +5,11 @@ Authors: Damian Ivanov
 Contributors: https://github.com/damianatorrpm/wayfire-plugin_dbus_interface/graphs/contributors
 
 ### Installation
-Standard:
-meson build && ninja -C build && meson install -C build
+- Install (wayfire-plugins-extra)[https://github.com/WayfireWM/wayfire-plugins-extra]
+- Build & install the plugin and wf-prop: `meson build && ninja -C build && sudo meson install -C build`
+- Enable `glib-main-loop` and `dbus_interface` in your wayfire.ini
+
+If one of the plugins isn't loaded (check wayfire's debug output), make sure the plugin was installed to the correct path.
 
 ### Coding style
 * uncrustify.ini in the repo
diff --git a/subprojects/dbus/dbus_interface.cpp b/subprojects/dbus/dbus_interface.cpp
index 58081cd..31c3b44 100644
--- a/subprojects/dbus/dbus_interface.cpp
+++ b/subprojects/dbus/dbus_interface.cpp
@@ -7,51 +7,60 @@
 #define DBUS_PLUGIN_DEBUG TRUE
 #define DBUS_PLUGIN_WARN TRUE
 
-extern "C"
-{
-#include <gio/gio.h>
+extern "C" {
 #include <sys/socket.h>
 #include <sys/types.h>
 };
 
-#include <iostream>
-#include <string>
-#include <charconv>
+#include <gio/gio.h>
 #include <algorithm>
+#include <charconv>
 #include <cmath>
+#include <iostream>
 #include <linux/input.h>
+#include <string>
 
-#include <wayfire/singleton-plugin.hpp>
-#include <wayfire/output.hpp>
-#include <wayfire/output-layout.hpp>
-#include <wayfire/workspace-manager.hpp>
-#include <wayfire/plugins/common/view-change-viewport-signal.hpp>
+#include <wayfire/compositor-view.hpp>
 #include <wayfire/core.hpp>
-#include <wayfire/util/log.hpp>
+#include <wayfire/debug.hpp>
+#include <wayfire/input-device.hpp>
 #include <wayfire/option-wrapper.hpp>
-#include <wayfire/signal-definitions.hpp>
-#include <wayfire/view.hpp>
-#include <wayfire/plugin.hpp>
+#include <wayfire/output-layout.hpp>
 #include <wayfire/output.hpp>
-#include <wayfire/core.hpp>
-#include <wayfire/view.hpp>
-#include <wayfire/util/duration.hpp>
-#include <wayfire/workspace-manager.hpp>
+#include <wayfire/plugin.hpp>
+#include <wayfire/plugins/common/view-change-viewport-signal.hpp>
 #include <wayfire/render-manager.hpp>
-#include <wayfire/compositor-view.hpp>
-#include <wayfire/output-layout.hpp>
-#include <wayfire/debug.hpp>
+#include <wayfire/signal-definitions.hpp>
+#include <wayfire/singleton-plugin.hpp>
 #include <wayfire/util.hpp>
-#include <wayfire/input-device.hpp>
+#include <wayfire/util/duration.hpp>
+#include <wayfire/util/log.hpp>
+#include <wayfire/view.hpp>
+#include <wayfire/workspace-manager.hpp>
 
 #include <wayfire/signal-definitions.hpp>
 
 #include "dbus_interface_backend.cpp"
+gboolean geometry_signal = FALSE;
+
+static void
+settings_changed (GSettings* settings, const gchar* key,
+                  gpointer user_data)
+{
+    if (g_strcmp0(key, "geometry-signal") == 0) {
+        geometry_signal = g_settings_get_boolean(settings, "geometry-signal");
+    }
+    else
+    {
+        g_warning("No such settings %s", key);
+    }
+}
 
 class dbus_interface_t
 {
   public:
-    /************* Connect all signals for already existing objects **************/
+    /************* Connect all signals for already existing objects
+     * **************/
     dbus_interface_t()
     {
 #ifdef DBUS_PLUGIN_DEBUG
@@ -61,44 +70,34 @@ class dbus_interface_t
         settings = g_settings_new("org.wayland.compositor.dbus");
         for (wf::output_t* output : wf_outputs)
         {
-            grab_interfaces[output] = std::make_unique<wf::plugin_grab_interface_t> (output);
+            grab_interfaces[output] =
+                std::make_unique<wf::plugin_grab_interface_t> (output);
             grab_interfaces[output]->name = "dbus";
             grab_interfaces[output]->capabilities = wf::CAPABILITY_GRAB_INPUT;
-            output->connect_signal("view-mapped",
-                                   &output_view_added);
+            output->connect_signal("view-mapped", &output_view_added);
 
-            output->connect_signal("wm-actions-above-changed",
-                                   &on_view_keep_above);
+            output->connect_signal("wm-actions-above-changed", &on_view_keep_above);
 
             output->connect_signal("output-configuration-changed",
                                    &output_configuration_changed);
 
-            output->connect_signal("view-minimize-request",
-                                   &output_view_minimized);
+            output->connect_signal("view-minimize-request", &output_view_minimized);
 
-            output->connect_signal("view-tile-request",
-                                   &output_view_maximized);
+            output->connect_signal("view-tile-request", &output_view_maximized);
 
-            output->connect_signal("view-move-request",
-                                   &output_view_moving);
+            output->connect_signal("view-move-request", &output_view_moving);
 
-            output->connect_signal("view-resize-request",
-                                   &output_view_resizing);
+            output->connect_signal("view-resize-request", &output_view_resizing);
 
-            output->connect_signal("view-change-viewport",
-                                   &view_workspaces_changed);
+            output->connect_signal("view-change-viewport", &view_workspaces_changed);
 
-            output->connect_signal("workspace-changed",
-                                   &output_workspace_changed);
+            output->connect_signal("workspace-changed", &output_workspace_changed);
 
-            output->connect_signal("view-layer-attached",
-                                   &role_changed);
+            output->connect_signal("view-layer-attached", &role_changed);
 
-            output->connect_signal("view-layer-detached",
-                                   &role_changed);
+            output->connect_signal("view-layer-detached", &role_changed);
 
-            output->connect_signal("view-focused",
-                                   &output_view_focus_changed);
+            output->connect_signal("view-focused", &output_view_focus_changed);
 
             output->connect_signal("view-fullscreen-request",
                                    &view_fullscreen_changed);
@@ -110,41 +109,35 @@ class dbus_interface_t
 
         for (wayfire_view view : core.get_all_views())
         {
-            view->connect_signal("app-id-changed",
-                                 &view_app_id_changed);
+            view->connect_signal("app-id-changed", &view_app_id_changed);
 
-            view->connect_signal("title-changed",
-                                 &view_title_changed);
+            view->connect_signal("title-changed", &view_title_changed);
 
-            view->connect_signal("geometry-changed",
-                                 &view_geometry_changed);
+            view->connect_signal("geometry-changed", &view_geometry_changed);
 
-            view->connect_signal("unmapped",
-                                 &view_closed);
+            view->connect_signal("unmapped", &view_closed);
 
-            view->connect_signal("tiled",
-                                 &view_tiled);
+            view->connect_signal("tiled", &view_tiled);
+
+            view->connect_signal("ping-timeout", &view_timeout);
+
+            // view->connect_signal("subsurface-added", &subsurface_added);
         }
 
         /****************** Connect core signals ***********************/
 
-        core.connect_signal("view-hints-changed",
-                            &view_hints_changed);
+        core.connect_signal("view-hints-changed", &view_hints_changed);
 
-        core.connect_signal("view-focus-request",
-                            &view_focus_request);
+        core.connect_signal("view-focus-request", &view_focus_request);
 
         core.connect_signal("view-pre-moved-to-output",
                             &view_output_move_requested);
 
-        core.connect_signal("view-moved-to-output",
-                            &view_output_moved);
+        core.connect_signal("view-moved-to-output", &view_output_moved);
 
-        core.connect_signal("pointer_button",
-                            &pointer_button_signal);
+        core.connect_signal("pointer_button", &pointer_button_signal);
 
-        core.connect_signal("tablet_button",
-                            &tablet_button_signal);
+        core.connect_signal("tablet_button", &tablet_button_signal);
 
         core.output_layout->connect_signal("output-added",
                                            &output_layout_output_added);
@@ -152,17 +145,18 @@ class dbus_interface_t
         core.output_layout->connect_signal("output-removed",
                                            &output_layout_output_removed);
 
-        /************* LOAD DBUS SERVICE THREAD *************/
-        dbus_context = g_main_context_new();
-        g_thread_new("dbus_thread",
-                     dbus_thread_exec_function,
-                     g_main_context_ref(dbus_context));
-
-        g_main_context_invoke_full(dbus_context,
-                                   G_PRIORITY_HIGH,
-                                   reinterpret_cast<GSourceFunc> (acquire_bus),
-                                   nullptr,
-                                   nullptr);
+        g_signal_connect(settings, "changed", G_CALLBACK(settings_changed), NULL);
+        geometry_signal = g_settings_get_boolean(settings, "geometry-signal");
+
+        acquire_bus();
+        gchar *startup_notify_cmd = NULL;
+        startup_notify_cmd = g_settings_get_string(settings, "startup-notify");
+        if (g_strcmp0(startup_notify_cmd, "") != 0) {
+          LOG(wf::log::LOG_LEVEL_DEBUG, "Running startup up notify:",
+              startup_notify_cmd);
+          core.run(startup_notify_cmd);
+        }
+        g_free(startup_notify_cmd);
     }
 
     ~dbus_interface_t()
@@ -179,10 +173,7 @@ class dbus_interface_t
 
         g_bus_unown_name(owner_id);
         g_dbus_node_info_unref(introspection_data);
-        g_main_context_pop_thread_default(dbus_context);
-        g_main_context_unref(dbus_context);
-        g_main_loop_quit(dbus_event_loop);
-        g_main_loop_unref(dbus_event_loop);
+        g_object_unref(settings);
         dbus_scale_filter::unload();
     }
 
@@ -190,8 +181,7 @@ class dbus_interface_t
     /***
      * A pointer button is interacted with
      ***/
-    wf::signal_connection_t pointer_button_signal{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t pointer_button_signal{[=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
             LOG(wf::log::LOG_LEVEL_DEBUG, "pointer_button_signal");
@@ -205,14 +195,14 @@ class dbus_interface_t
             uint32_t button;
 
             cursor_position = core.get_cursor_position();
-            wf_ev = static_cast<wf::input_event_signal<wlr_event_pointer_button>*> (data);
+            wf_ev =
+                static_cast<wf::input_event_signal<wlr_event_pointer_button>*> (data);
             wlr_signal = static_cast<wlr_event_pointer_button*> (wf_ev->event);
             button_state = wlr_signal->state;
             button = wlr_signal->button;
             button_released = (button_state == WLR_BUTTON_RELEASED);
 
-            if (find_view_under_action && button_released)
-            {
+            if (find_view_under_action && button_released) {
                 GVariant* _signal_data;
                 wayfire_view view;
                 view = core.get_view_at(cursor_position);
@@ -221,11 +211,8 @@ class dbus_interface_t
                 bus_emit_signal("view_pressed", _signal_data);
             }
 
-            signal_data = g_variant_new("(ddub)",
-                                        cursor_position.x,
-                                        cursor_position.y,
-                                        button,
-                                        button_released);
+            signal_data = g_variant_new("(ddub)", cursor_position.x, cursor_position.y,
+                                        button, button_released);
             g_variant_ref(signal_data);
             bus_emit_signal("pointer_clicked", signal_data);
         }
@@ -235,8 +222,7 @@ class dbus_interface_t
      * A tablet button is interacted with
      * TODO: do more for touch events
      ***/
-    wf::signal_connection_t tablet_button_signal{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t tablet_button_signal{[=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
             LOG(wf::log::LOG_LEVEL_DEBUG, "tablet_button_signal");
@@ -248,8 +234,7 @@ class dbus_interface_t
     /***
      * A new view is added to an output.
      ***/
-    wf::signal_connection_t output_view_added{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t output_view_added{[=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
             LOG(wf::log::LOG_LEVEL_DEBUG, "output_view_added");
@@ -259,8 +244,7 @@ class dbus_interface_t
             wayfire_view view;
 
             view = get_signaled_view(data);
-            if (!view)
-            {
+            if (!view) {
 #ifdef DBUS_PLUGIN_DEBUG
                 LOG(wf::log::LOG_LEVEL_DEBUG, "output_view_added no view");
 #endif
@@ -277,14 +261,42 @@ class dbus_interface_t
             view->connect_signal("geometry-changed", &view_geometry_changed);
             view->connect_signal("unmapped", &view_closed);
             view->connect_signal("tiled", &view_tiled);
+            view->connect_signal("ping-timeout", &view_timeout);
+            // view->connect_signal("subsurface-added", &subsurface_added);
+        }
+    };
+
+    // wf::signal_connection_t subsurface_added{[=](wf::signal_data_t *data) {
+    // LOGE("subsurface_added signal");
+    // }};
+
+    /***
+     * The View has received ping timeout.
+     ***/
+    wf::signal_connection_t view_timeout{[=] (wf::signal_data_t* data)
+        {
+            GVariant* signal_data;
+            wayfire_view view;
+            view = get_signaled_view(data);
+
+            if (!view) {
+                LOGE("view_timeout no view");
+
+                return;
+            }
+
+            LOGE("view_timeout ", view->get_id());
+
+            signal_data = g_variant_new("(u)", view->get_id());
+            g_variant_ref(signal_data);
+            bus_emit_signal("view_timeout", signal_data);
         }
     };
 
     /***
      * The view has closed.
      ***/
-    wf::signal_connection_t view_closed{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t view_closed{[=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
             LOG(wf::log::LOG_LEVEL_DEBUG, "view_closed");
@@ -295,8 +307,7 @@ class dbus_interface_t
 
             view = get_signaled_view(data);
 
-            if (!view)
-            {
+            if (!view) {
 #ifdef DBUS_PLUGIN_DEBUG
                 LOG(wf::log::LOG_LEVEL_DEBUG, "view_closed no view");
 #endif
@@ -313,8 +324,7 @@ class dbus_interface_t
     /***
      * The view's app_id has changed.
      ***/
-    wf::signal_connection_t view_app_id_changed{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t view_app_id_changed{[=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
             LOG(wf::log::LOG_LEVEL_DEBUG, "view_app_id_changed");
@@ -324,8 +334,7 @@ class dbus_interface_t
             wayfire_view view;
 
             view = get_signaled_view(data);
-            if (!view)
-            {
+            if (!view) {
 #ifdef DBUS_PLUGIN_DEBUG
 
                 LOG(wf::log::LOG_LEVEL_DEBUG, "view_app_id_changed no view");
@@ -334,9 +343,8 @@ class dbus_interface_t
                 return;
             }
 
-            signal_data = g_variant_new("(us)",
-                                        view->get_id(),
-                                        view->get_app_id().c_str());
+            signal_data =
+                g_variant_new("(us)", view->get_id(), view->get_app_id().c_str());
             g_variant_ref(signal_data);
             bus_emit_signal("view_app_id_changed", signal_data);
         }
@@ -345,8 +353,7 @@ class dbus_interface_t
     /***
      * The view's title has changed.
      ***/
-    wf::signal_connection_t view_title_changed{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t view_title_changed{[=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
             LOG(wf::log::LOG_LEVEL_DEBUG, "view_title_changed");
@@ -356,18 +363,12 @@ class dbus_interface_t
             wayfire_view view;
 
             view = get_signaled_view(data);
-            if (!view)
-            {
-#ifdef DBUS_PLUGIN_DEBUG
-                LOG(wf::log::LOG_LEVEL_DEBUG, "view_title_changed no view");
-#endif
-
+            if (!check_view_toplevel) {
                 return;
             }
 
-            signal_data = g_variant_new("(us)",
-                                        view->get_id(),
-                                        view->get_title().c_str());
+            signal_data =
+                g_variant_new("(us)", view->get_id(), view->get_title().c_str());
             g_variant_ref(signal_data);
             bus_emit_signal("view_title_changed", signal_data);
         }
@@ -376,8 +377,7 @@ class dbus_interface_t
     /***
      * The view's fullscreen status has changed.
      ***/
-    wf::signal_connection_t view_fullscreen_changed{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t view_fullscreen_changed{[=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
             LOG(wf::log::LOG_LEVEL_DEBUG, "view_fullscreened");
@@ -389,9 +389,7 @@ class dbus_interface_t
 
             signal = static_cast<wf::view_fullscreen_signal*> (data);
             view = signal->view;
-            signal_data = g_variant_new("(ub)",
-                                        view->get_id(),
-                                        signal->state);
+            signal_data = g_variant_new("(ub)", view->get_id(), signal->state);
             g_variant_ref(signal_data);
             bus_emit_signal("view_fullscreen_changed", signal_data);
         }
@@ -400,13 +398,9 @@ class dbus_interface_t
     /***
      * The view's geometry has changed.
      ***/
-    wf::signal_connection_t view_geometry_changed{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t view_geometry_changed{[=] (wf::signal_data_t* data)
         {
-            bool enabled;
-            g_settings_get(settings, "geometry-signal", "b", &enabled);
-            if (!enabled)
-            {
+            if (!geometry_signal) {
                 return;
             }
 
@@ -421,12 +415,8 @@ class dbus_interface_t
 
             view = get_signaled_view(data);
             geometry = view->get_output_geometry();
-            signal_data = g_variant_new("(uiiii)",
-                                        view->get_id(),
-                                        geometry.x,
-                                        geometry.y,
-                                        geometry.width,
-                                        geometry.height);
+            signal_data = g_variant_new("(uiiii)", view->get_id(), geometry.x,
+                                        geometry.y, geometry.width, geometry.height);
             g_variant_ref(signal_data);
             bus_emit_signal("view_geometry_changed", signal_data);
         }
@@ -435,11 +425,9 @@ class dbus_interface_t
     /***
      * The view's tiling status has changed.
      ***/
-    wf::signal_connection_t view_tiled{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t view_tiled{[=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
-
             LOG(wf::log::LOG_LEVEL_DEBUG, "view_tiled");
 #endif
 
@@ -450,14 +438,11 @@ class dbus_interface_t
             signal = static_cast<wf::view_tiled_signal*> (data);
             view = signal->view;
 
-            if (!view)
-            {
+            if (!check_view_toplevel) {
                 return;
             }
 
-            signal_data = g_variant_new("(uu)",
-                                        view->get_id(),
-                                        signal->new_edges);
+            signal_data = g_variant_new("(uu)", view->get_id(), signal->new_edges);
             g_variant_ref(signal_data);
             bus_emit_signal("view_tiling_changed", signal_data);
         }
@@ -466,11 +451,9 @@ class dbus_interface_t
     /***
      * The view's output has changed.
      ***/
-    wf::signal_connection_t view_output_moved{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t view_output_moved{[=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
-
             LOG(wf::log::LOG_LEVEL_DEBUG, "view_output_moved");
 #endif
 
@@ -483,16 +466,14 @@ class dbus_interface_t
             signal = static_cast<wf::view_moved_to_output_signal*> (data);
             view = signal->view;
 
-            if (!view)
-            {
+            if (!check_view_toplevel) {
                 return;
             }
 
             old_output = signal->old_output;
             new_output = signal->new_output;
 
-            signal_data = g_variant_new("(uuu)", view->get_id(),
-                                        old_output->get_id(),
+            signal_data = g_variant_new("(uuu)", view->get_id(), old_output->get_id(),
                                         new_output->get_id());
             g_variant_ref(signal_data);
             bus_emit_signal("view_output_moved", signal_data);
@@ -518,14 +499,12 @@ class dbus_interface_t
             signal = static_cast<wf::view_pre_moved_to_output_signal*> (data);
             view = signal->view;
 
-            if (view)
-            {
+            if (view) {
                 old_output = signal->old_output;
                 new_output = signal->new_output;
-                signal_data = g_variant_new("(uuu)",
-                                            view->get_id(),
-                                            old_output->get_id(),
-                                            new_output->get_id());
+                signal_data =
+                    g_variant_new("(uuu)", view->get_id(), old_output->get_id(),
+                                  new_output->get_id());
                 g_variant_ref(signal_data);
                 bus_emit_signal("view_output_move_requested", signal_data);
             }
@@ -535,8 +514,7 @@ class dbus_interface_t
     /***
      * The view's role has changed.
      ***/
-    wf::signal_connection_t role_changed{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t role_changed{[=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
             LOG(wf::log::LOG_LEVEL_DEBUG, "role_changed");
@@ -547,8 +525,7 @@ class dbus_interface_t
 
             view = get_signaled_view(data);
 
-            if (!view)
-            {
+            if (!view) {
 #ifdef DBUS_PLUGIN_DEBUG
                 LOG(wf::log::LOG_LEVEL_DEBUG, "role_changed no view");
 #endif
@@ -558,8 +535,7 @@ class dbus_interface_t
 
             uint role = 0;
 
-            if (view->role == wf::VIEW_ROLE_TOPLEVEL)
-            {
+            if (view->role == wf::VIEW_ROLE_TOPLEVEL) {
                 role = 1;
             }
             else
@@ -582,8 +558,7 @@ class dbus_interface_t
     /***
      * The view's workspaces have changed.
      ***/
-    wf::signal_connection_t view_workspaces_changed{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t view_workspaces_changed{[=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
             LOG(wf::log::LOG_LEVEL_DEBUG, "view_workspaces_changed");
@@ -596,8 +571,7 @@ class dbus_interface_t
             signal = static_cast<view_change_viewport_signal*> (data);
             view = signal->view;
 
-            if (!view)
-            {
+            if (!check_view_toplevel) {
                 return;
             }
 
@@ -611,8 +585,7 @@ class dbus_interface_t
     /***
      * The view's maximized status has changed.
      ***/
-    wf::signal_connection_t output_view_maximized{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t output_view_maximized{[=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
             LOG(wf::log::LOG_LEVEL_DEBUG, "output_view_maximized");
@@ -626,15 +599,12 @@ class dbus_interface_t
             signal = static_cast<wf::view_tiled_signal*> (data);
             view = signal->view;
 
-            if (!view)
-            {
+            if (!check_view_toplevel) {
                 return;
             }
 
             maximized = (signal->new_edges == wf::TILED_EDGES_ALL);
-            signal_data = g_variant_new("(ub)",
-                                        view->get_id(),
-                                        maximized);
+            signal_data = g_variant_new("(ub)", view->get_id(), maximized);
             g_variant_ref(signal_data);
             bus_emit_signal("view_maximized_changed", signal_data);
         }
@@ -643,11 +613,9 @@ class dbus_interface_t
     /***
      * The view's minimized status has changed.
      ***/
-    wf::signal_connection_t output_view_minimized{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t output_view_minimized{[=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
-
             LOG(wf::log::LOG_LEVEL_DEBUG, "output_view_minimized");
 #endif
 
@@ -659,15 +627,12 @@ class dbus_interface_t
             signal = static_cast<wf::view_minimize_request_signal*> (data);
             view = signal->view;
 
-            if (!view)
-            {
+            if (!check_view_toplevel) {
                 return;
             }
 
             minimized = signal->state;
-            signal_data = g_variant_new("(ub)",
-                                        view->get_id(),
-                                        minimized);
+            signal_data = g_variant_new("(ub)", view->get_id(), minimized);
             g_variant_ref(signal_data);
             bus_emit_signal("view_minimized_changed", signal_data);
         }
@@ -687,15 +652,13 @@ class dbus_interface_t
             signal = static_cast<wf::focus_view_signal*> (data);
             view = signal->view;
 
-            if (!view)
-            {
+            if (!check_view_toplevel) {
                 return;
             }
 
             view_id = view->get_id();
 
-            if (view_id == focused_view_id)
-            {
+            if (view_id == focused_view_id) {
 #ifdef DBUS_PLUGIN_DEBUG
                 LOG(wf::log::LOG_LEVEL_DEBUG,
                     "output_view_focus_changed old focus view");
@@ -704,8 +667,7 @@ class dbus_interface_t
                 return;
             }
 
-            if (view->role != wf::VIEW_ROLE_TOPLEVEL)
-            {
+            if (view->role != wf::VIEW_ROLE_TOPLEVEL) {
 #ifdef DBUS_PLUGIN_DEBUG
                 LOG(wf::log::LOG_LEVEL_DEBUG,
                     "output_view_focus_changed not a toplevel ");
@@ -714,8 +676,11 @@ class dbus_interface_t
                 return;
             }
 
-            if (view->has_data("view-demands-attention"))
-            {
+            if (!view->activated) {
+                return;
+            }
+
+            if (view->has_data("view-demands-attention")) {
                 view->erase_data("view-demands-attention");
             }
 
@@ -733,11 +698,9 @@ class dbus_interface_t
      *   2) Multiplayer games if game is found.
      *      (source engine does this)
      ***/
-    wf::signal_connection_t view_focus_request{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t view_focus_request{[=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
-
             LOG(wf::log::LOG_LEVEL_DEBUG, "view_focus_request_signal");
 #endif
             bool reconfigure = true;
@@ -747,20 +710,17 @@ class dbus_interface_t
             wf::output_t* view_output;
 
             signal = static_cast<wf::view_focus_request_signal*> (data);
-            if (signal->carried_out)
-            {
+            if (signal->carried_out) {
                 return;
             }
 
-            if (!signal->self_request)
-            {
+            if (!signal->self_request) {
                 return;
             }
 
             view = signal->view;
 
-            if (!view)
-            {
+            if (!check_view_toplevel) {
                 return;
             }
 
@@ -789,8 +749,7 @@ class dbus_interface_t
      * The currently ownly interesting hint
      * is view-demands-attention
      ***/
-    wf::signal_connection_t view_hints_changed{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t view_hints_changed{[=] (wf::signal_data_t* data)
         {
             wf::view_hints_changed_signal* signal;
             GVariant* signal_data;
@@ -800,8 +759,7 @@ class dbus_interface_t
             signal = static_cast<wf::view_hints_changed_signal*> (data);
             view = signal->view;
 
-            if (!view)
-            {
+            if (!check_view_toplevel) {
 #ifdef DBUS_PLUGIN_DEBUG
 
                 LOG(wf::log::LOG_LEVEL_DEBUG, "view_hints_changed no view");
@@ -815,14 +773,11 @@ class dbus_interface_t
             LOG(wf::log::LOG_LEVEL_DEBUG, "view_hints_changed",
                 view->has_data("view-demands-attention"));
 #endif
-            if (view->has_data("view-demands-attention"))
-            {
+            if (view->has_data("view-demands-attention")) {
                 view_wants_attention = true;
             }
 
-            signal_data = g_variant_new("(ub)",
-                                        view->get_id(),
-                                        view_wants_attention);
+            signal_data = g_variant_new("(ub)", view->get_id(), view_wants_attention);
             g_variant_ref(signal_data);
             bus_emit_signal("view_attention_changed", signal_data);
         }
@@ -833,8 +788,7 @@ class dbus_interface_t
      * The status of that has somehow changed.
      * https://github.com/WayfireWM/wayfire/issues/639
      ***/
-    wf::signal_connection_t output_view_moving{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t output_view_moving{[=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
             LOG(wf::log::LOG_LEVEL_DEBUG, "output_view_moving");
@@ -845,8 +799,7 @@ class dbus_interface_t
 
             view = get_signaled_view(data);
 
-            if (!view)
-            {
+            if (!check_view_toplevel) {
                 return;
             }
 
@@ -861,8 +814,7 @@ class dbus_interface_t
      * The status of that has somehow changed.
      * https://github.com/WayfireWM/wayfire/issues/639
      ***/
-    wf::signal_connection_t output_view_resizing{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t output_view_resizing{[=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
             LOG(wf::log::LOG_LEVEL_DEBUG, "output_view_resizing");
@@ -873,8 +825,7 @@ class dbus_interface_t
 
             view = get_signaled_view(data);
 
-            if (!view)
-            {
+            if (!check_view_toplevel) {
                 return;
             }
 
@@ -888,21 +839,18 @@ class dbus_interface_t
      * The wm-actions plugin changed the above_layer
      * state of a view.
      ***/
-    wf::signal_connection_t on_view_keep_above{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t on_view_keep_above{[=] (wf::signal_data_t* data)
         {
             GVariant* signal_data;
             wayfire_view view;
 
             view = wf::get_signaled_view(data);
 
-            if (!view)
-            {
+            if (!check_view_toplevel) {
                 return;
             }
 
-            signal_data = g_variant_new("(ub)",
-                                        view->get_id(),
+            signal_data = g_variant_new("(ub)", view->get_id(),
                                         view->has_data("wm-actions-above"));
             g_variant_ref(signal_data);
             bus_emit_signal("view_keep_above_changed", signal_data);
@@ -921,8 +869,7 @@ class dbus_interface_t
     /***
      * No usecase has been found for these 3
      ***/
-    wf::signal_connection_t output_detach_view{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t output_detach_view{[=] (wf::signal_data_t* data)
         {
         }
     };
@@ -931,13 +878,13 @@ class dbus_interface_t
         {
         }
     };
-    wf::signal_connection_t output_view_attached{
-        [=] (wf::signal_data_t* data)
+    wf::signal_connection_t output_view_attached{[=] (wf::signal_data_t* data)
         {
         }
     };
 
-    /******************************Output Related Slots***************************/
+    /******************************Output Related
+     * Slots***************************/
 
     /***
      * If the output configuration is changed somehow,
@@ -974,10 +921,9 @@ class dbus_interface_t
             newHorizontalWorkspace = signal->new_viewport.x;
             newVerticalWorkspace = signal->new_viewport.y;
             output = signal->output;
-            signal_data = g_variant_new("(uii)",
-                                        output->get_id(),
-                                        newHorizontalWorkspace,
-                                        newVerticalWorkspace);
+            signal_data =
+                g_variant_new("(uii)", output->get_id(), newHorizontalWorkspace,
+                              newVerticalWorkspace);
 
             g_variant_ref(signal_data);
             bus_emit_signal("output_workspace_changed", signal_data);
@@ -999,53 +945,43 @@ class dbus_interface_t
             output = get_signaled_output(data);
             auto search = connected_wf_outputs.find(output);
 
-            if (search != connected_wf_outputs.end())
-            {
+            if (search != connected_wf_outputs.end()) {
                 return;
             }
 
-            grab_interfaces[output] = std::make_unique<wf::plugin_grab_interface_t> (output);
+            grab_interfaces[output] =
+                std::make_unique<wf::plugin_grab_interface_t> (output);
             grab_interfaces[output]->name = "dbus";
             grab_interfaces[output]->capabilities = wf::CAPABILITY_GRAB_INPUT;
 
-            output->connect_signal("wm-actions-above-changed",
-                                   &on_view_keep_above);
+            output->connect_signal("wm-actions-above-changed", &on_view_keep_above);
 
             output->connect_signal("view-fullscreen-request",
                                    &view_fullscreen_changed);
 
-            output->connect_signal("view-mapped",
-                                   &output_view_added);
+            output->connect_signal("view-mapped", &output_view_added);
 
             output->connect_signal("output-configuration-changed",
                                    &output_configuration_changed);
 
-            output->connect_signal("view-minimize-request",
-                                   &output_view_minimized);
+            output->connect_signal("view-minimize-request", &output_view_minimized);
 
-            output->connect_signal("view-tile-request",
-                                   &output_view_maximized);
+            output->connect_signal("view-tile-request", &output_view_maximized);
 
-            output->connect_signal("view-move-request",
-                                   &output_view_moving);
+            output->connect_signal("view-move-request", &output_view_moving);
 
             output->connect_signal("view-change-viewport",
                                    &view_workspaces_changed);
 
-            output->connect_signal("workspace-changed",
-                                   &output_workspace_changed);
+            output->connect_signal("workspace-changed", &output_workspace_changed);
 
-            output->connect_signal("view-resize-request",
-                                   &output_view_resizing);
+            output->connect_signal("view-resize-request", &output_view_resizing);
 
-            output->connect_signal("view-focused",
-                                   &output_view_focus_changed);
+            output->connect_signal("view-focused", &output_view_focus_changed);
 
-            output->connect_signal("view-layer-attached",
-                                   &role_changed);
+            output->connect_signal("view-layer-attached", &role_changed);
 
-            output->connect_signal("view-layer-detached",
-                                   &role_changed);
+            output->connect_signal("view-layer-detached", &role_changed);
 
             wf_outputs = core.output_layout->get_outputs();
             connected_wf_outputs.insert(output);
@@ -1063,7 +999,6 @@ class dbus_interface_t
         [=] (wf::signal_data_t* data)
         {
 #ifdef DBUS_PLUGIN_DEBUG
-
             LOG(wf::log::LOG_LEVEL_DEBUG, "output_layout_output_removed");
 #endif
             GVariant* signal_data;
@@ -1072,8 +1007,7 @@ class dbus_interface_t
             output = get_signaled_output(data);
             auto search = connected_wf_outputs.find(output);
 
-            if (search != connected_wf_outputs.end())
-            {
+            if (search != connected_wf_outputs.end()) {
                 wf_outputs = core.output_layout->get_outputs();
                 connected_wf_outputs.erase(output);
 
@@ -1089,5 +1023,5 @@ class dbus_interface_t
     };
 };
 
-DECLARE_WAYFIRE_PLUGIN((wf::singleton_plugin_t<dbus_interface_t, true>));
-// bool = unloadable
\ No newline at end of file
+DECLARE_WAYFIRE_PLUGIN((wf::singleton_plugin_t<dbus_interface_t, false>));
+// bool = unloadable
diff --git a/subprojects/dbus/dbus_interface_backend.cpp b/subprojects/dbus/dbus_interface_backend.cpp
index 71a67dc..583bf23 100644
--- a/subprojects/dbus/dbus_interface_backend.cpp
+++ b/subprojects/dbus/dbus_interface_backend.cpp
@@ -5,54 +5,46 @@
 #define DBUS_PLUGIN_DEBUG TRUE
 #define DBUS_PLUGIN_WARN TRUE
 
-extern "C"
-{
+extern "C" {
 #define class class_t
 #define static
-#include <wlr/xwayland.h>
 #include <X11/Xatom.h>
-#include <xcb/xcb.h>
+#include <wlr/xwayland.h>
 #include <xcb/res.h>
+#include <xcb/xcb.h>
 // #include <xwayland/xwm.h>
 #undef static
 #undef class
-#include <gio/gio.h>
 #include <sys/socket.h>
 #include <wlr/types/wlr_idle.h>
 };
 
+#include <gio/gio.h>
 #include <ctime>
 #include <iostream>
-#include <set>
 #include <list>
+#include <set>
 
 #include <unistd.h>
-#include <functional>
 
-#include <wayfire/output.hpp>
-#include <wayfire/output-layout.hpp>
-#include <wayfire/workspace-manager.hpp>
-#include <wayfire/plugins/common/view-change-viewport-signal.hpp>
+#include "dbus_scale_filter.hpp"
+#include "wayfire/view-transform.hpp"
+#include <wayfire/compositor-view.hpp>
 #include <wayfire/core.hpp>
-#include <wayfire/util/log.hpp>
+#include <wayfire/debug.hpp>
+#include <wayfire/gtk-shell.hpp>
 #include <wayfire/option-wrapper.hpp>
-#include <wayfire/signal-definitions.hpp>
-#include <wayfire/view.hpp>
-#include <wayfire/plugin.hpp>
+#include <wayfire/output-layout.hpp>
 #include <wayfire/output.hpp>
-#include <wayfire/core.hpp>
-#include <wayfire/view.hpp>
-#include <wayfire/util/duration.hpp>
-#include <wayfire/workspace-manager.hpp>
+#include <wayfire/plugin.hpp>
+#include <wayfire/plugins/common/view-change-viewport-signal.hpp>
 #include <wayfire/render-manager.hpp>
-#include <wayfire/compositor-view.hpp>
-#include <wayfire/output-layout.hpp>
-#include <wayfire/debug.hpp>
 #include <wayfire/signal-definitions.hpp>
 #include <wayfire/util.hpp>
-#include <wayfire/gtk-shell.hpp>
-#include "wayfire/view-transform.hpp"
-#include "dbus_scale_filter.hpp"
+#include <wayfire/util/duration.hpp>
+#include <wayfire/util/log.hpp>
+#include <wayfire/view.hpp>
+#include <wayfire/workspace-manager.hpp>
 
 wf::option_wrapper_t<bool> xwayland_enabled("core/xwayland");
 
@@ -60,15 +52,13 @@ wf::compositor_core_t& core = wf::get_core();
 std::vector<wf::output_t*> wf_outputs = core.output_layout->get_outputs();
 std::set<wf::output_t*> connected_wf_outputs;
 GSettings* settings;
-std::map<wf::output_t*, std::unique_ptr<wf::plugin_grab_interface_t>> grab_interfaces;
+std::map<wf::output_t*, std::unique_ptr<wf::plugin_grab_interface_t>>
+grab_interfaces;
 
 uint focused_view_id;
 bool find_view_under_action = false;
 GDBusNodeInfo* introspection_data = nullptr;
 GDBusConnection* dbus_connection;
-GMainContext* dbus_context;
-GMainLoop* dbus_event_loop;
-GThread* dbus_thread;
 uint owner_id;
 
 static gboolean
@@ -102,11 +92,9 @@ get_view_from_view_id (uint view_id)
     view_vector = core.get_all_views();
 
     // there is no view_id 0 use it as get_active_view(hint)
-    if (view_id == 0)
-    {
+    if (view_id == 0) {
         view = core.get_cursor_focus_view();
-        if (check_view_toplevel(view))
-        {
+        if (check_view_toplevel(view)) {
             return view;
         }
     }
@@ -114,10 +102,8 @@ get_view_from_view_id (uint view_id)
     for (auto it = view_vector.begin(); it != view_vector.end(); ++it)
     {
         wayfire_view v = *it;
-        if (check_view_toplevel(v))
-        {
-            if (v->get_id() == view_id)
-            {
+        if (check_view_toplevel(v)) {
+            if (v->get_id() == view_id) {
                 return v;
             }
         }
@@ -131,8 +117,7 @@ get_output_from_output_id (uint output_id)
 {
     for (wf::output_t* wf_output : wf_outputs)
     {
-        if (wf_output->get_id() == output_id)
-        {
+        if (wf_output->get_id() == output_id) {
             return wf_output;
         }
     }
@@ -153,8 +138,7 @@ restack_view (uint view_id, uint related_view_id, gboolean above)
         wayfire_view view = get_view_from_view_id(view_id);
         wayfire_view related_view = get_view_from_view_id(related_view_id);
 
-        if (!check_view_toplevel(view) || !check_view_toplevel(related_view))
-        {
+        if (!check_view_toplevel(view) || !check_view_toplevel(related_view)) {
             delete idle_call;
 
             return;
@@ -167,15 +151,12 @@ restack_view (uint view_id, uint related_view_id, gboolean above)
             return;
         }
 
-        if (above)
-        {
-            view->get_output()->workspace->restack_above(
-                view, related_view);
+        if (above) {
+            view->get_output()->workspace->restack_above(view, related_view);
         }
         else
         {
-            view->get_output()->workspace->restack_below(
-                view, related_view);
+            view->get_output()->workspace->restack_below(view, related_view);
         }
 
         delete idle_call;
@@ -414,6 +395,9 @@ const gchar introspection_xml [] =
     "     <arg type='b' name='all_workspaces' direction='in'/>"
     "     <arg type='s' name='app_id_filter' direction='in'/>"
     "   </method>"
+    "   <method name='ensure_view_visible'>"
+    "     <arg type='u' name='view_id' direction='in'/>"
+    "   </method>"
     /************************* Signals ************************/
     /***
      * Core Input Signals
@@ -548,12 +532,10 @@ const gchar introspection_xml [] =
     "</node>";
 
 static void
-handle_method_call (GDBusConnection* connection,
-                    const gchar* sender,
+handle_method_call (GDBusConnection* connection, const gchar* sender,
                     const gchar* object_path,
                     const gchar* interface_name,
-                    const gchar* method_name,
-                    GVariant* parameters,
+                    const gchar* method_name, GVariant* parameters,
                     GDBusMethodInvocation* invocation,
                     gpointer user_data)
 {
@@ -561,8 +543,7 @@ handle_method_call (GDBusConnection* connection,
     LOG(wf::log::LOG_LEVEL_DEBUG, "handle_method_call bus called ", method_name);
 #endif
 
-    if (g_strcmp0(method_name, "change_view_above") == 0)
-    {
+    if (g_strcmp0(method_name, "change_view_above") == 0) {
         uint view_id;
         uint action;
 
@@ -571,8 +552,7 @@ handle_method_call (GDBusConnection* connection,
         idle_call->run_once([=] ()
         {
             wayfire_view view = get_view_from_view_id(view_id);
-            if (!check_view_toplevel(view))
-            {
+            if (!check_view_toplevel(view)) {
                 delete idle_call;
 
                 return;
@@ -584,8 +564,7 @@ handle_method_call (GDBusConnection* connection,
             is_above = view->has_data("wm-actions-above");
             output = view->get_output();
 
-            if ((action == 0) && is_above)
-            {
+            if ((action == 0) && is_above) {
                 signal_data.view = view;
                 output->emit_signal("wm-actions-toggle-above", &signal_data);
             }
@@ -612,6 +591,26 @@ handle_method_call (GDBusConnection* connection,
 
     /*************** View Actions ****************/
     else
+    if (g_strcmp0(method_name, "ensure_view_visible") == 0)
+    {
+        uint view_id;
+        g_variant_get(parameters, "(u)", &view_id);
+        wf::wl_idle_call* idle_call = new wf::wl_idle_call;
+        idle_call->run_once([=] ()
+        {
+            wayfire_view view = get_view_from_view_id(view_id);
+
+            if (check_view_toplevel(view)) {
+                view->get_output()->ensure_visible(view);
+            }
+
+            delete idle_call;
+        });
+        g_dbus_method_invocation_return_value(invocation, NULL);
+
+        return;
+    }
+    else
     if (g_strcmp0(method_name, "update_view_minimize_hint") == 0)
     {
         uint view_id;
@@ -640,40 +639,36 @@ handle_method_call (GDBusConnection* connection,
         double intensity;
 
         g_variant_get(parameters, "(ud)", &view_id, &intensity);
+
         wf::wl_idle_call* idle_call = new wf::wl_idle_call;
         idle_call->run_once([=] ()
         {
             wayfire_view view = get_view_from_view_id(view_id);
-            if (!check_view_toplevel(view))
-            {
+            if (!check_view_toplevel(view)) {
                 delete idle_call;
 
                 return;
             }
 
-            if (intensity == 1.0)
-            {
-                if (view->get_transformer("dbus-shade"))
-                {
+            if (intensity == 1.0) {
+                if (view->get_transformer("dbus-shade")) {
                     view->pop_transformer("dbus-shade");
                 }
             }
             else
             {
                 wf::view_2D* transformer;
-                if (!view->get_transformer("dbus-shade"))
-                {
-                    view->add_transformer(std::make_unique<wf::view_2D> (
-                        view), "dbus-shade");
+                if (!view->get_transformer("dbus-shade")) {
+                    view->add_transformer(std::make_unique<wf::view_2D> (view),
+                                          "dbus-shade");
                 }
 
                 transformer = dynamic_cast<wf::view_2D*> (
                     view->get_transformer("dbus-shade").get());
 
-                if (transformer->alpha != (float)intensity)
-                {
+                if (transformer->alpha != (float)intensity) {
                     transformer->alpha = (float)intensity;
-                    view->damage();
+                    // view->damage();
                 }
             }
 
@@ -825,15 +820,13 @@ handle_method_call (GDBusConnection* connection,
         idle_call->run_once([=] ()
         {
             wayfire_view view = get_view_from_view_id(view_id);
-            if (!check_view_toplevel(view))
-            {
+            if (!check_view_toplevel(view)) {
                 delete idle_call;
 
                 return;
             }
 
-            if (action == 0)
-            {
+            if (action == 0) {
                 view->set_activated(false);
             }
 
@@ -934,8 +927,7 @@ handle_method_call (GDBusConnection* connection,
             delete idle_call;
         });
 
-        g_dbus_method_invocation_return_value(invocation,
-                                              nullptr);
+        g_dbus_method_invocation_return_value(invocation, nullptr);
 
         return;
     }
@@ -952,16 +944,14 @@ handle_method_call (GDBusConnection* connection,
         idle_call->run_once([=] ()
         {
             wayfire_view view = get_view_from_view_id(view_id);
-            if (!check_view_toplevel(view))
-            {
+            if (!check_view_toplevel(view)) {
                 delete idle_call;
 
                 return;
             }
 
             wf::output_t* output = get_output_from_output_id(output_id);
-            if (output)
-            {
+            if (output) {
                 core.move_view_to_output(view, output, TRUE);
             }
 
@@ -978,15 +968,14 @@ handle_method_call (GDBusConnection* connection,
         int new_workspace_x;
         int new_workspace_y;
 
-        g_variant_get(parameters, "(uii)", &view_id,
-                      &new_workspace_x, &new_workspace_y);
+        g_variant_get(parameters, "(uii)", &view_id, &new_workspace_x,
+                      &new_workspace_y);
 
         wf::wl_idle_call* idle_call = new wf::wl_idle_call;
         idle_call->run_once([=] ()
         {
             wayfire_view view = get_view_from_view_id(view_id);
-            if (!check_view_toplevel(view))
-            {
+            if (!check_view_toplevel(view)) {
                 delete idle_call;
 
                 return;
@@ -1009,16 +998,15 @@ handle_method_call (GDBusConnection* connection,
         int new_workspace_x;
         int new_workspace_y;
 
-        g_variant_get(parameters, "(uii)", &output_id,
-                      &new_workspace_x, &new_workspace_y);
+        g_variant_get(parameters, "(uii)", &output_id, &new_workspace_x,
+                      &new_workspace_y);
 
         wf::wl_idle_call* idle_call = new wf::wl_idle_call;
         idle_call->run_once([=] ()
         {
             wf::output_t* output = get_output_from_output_id(output_id);
 
-            if (output)
-            {
+            if (output) {
                 wf::point_t new_workspace_coord;
                 new_workspace_coord = {new_workspace_x, new_workspace_y};
                 output->workspace->request_workspace(new_workspace_coord);
@@ -1047,8 +1035,7 @@ handle_method_call (GDBusConnection* connection,
 
             for (wf::output_t* output : wf_outputs)
             {
-                if (output)
-                {
+                if (output) {
                     output->workspace->request_workspace(new_workspace_coord);
                 }
             }
@@ -1078,28 +1065,28 @@ handle_method_call (GDBusConnection* connection,
         g_variant_get(parameters, "(bs)", &all_workspaces, &app_id);
 
         wf::wl_idle_call* idle_call = new wf::wl_idle_call;
-        idle_call->run_once([all_workspaces, app_id = std::string(app_id), idle_call] ()
+        idle_call->run_once(
+            [all_workspaces, app_id = std::string(app_id), idle_call] ()
         {
             wf::output_t* output = core.get_active_output();
             auto filter = dbus_scale_filter::get(output);
             filter->set_filter(std::move(app_id));
 
-            if (output->is_plugin_active("scale"))
-            {
+            if (output->is_plugin_active("scale")) {
                 output->emit_signal("scale-update", nullptr);
             }
             else
             {
                 wf::activator_data_t adata;
                 adata.source = wf::activator_source_t::PLUGIN;
-                output->call_plugin(all_workspaces ? "scale/toggle_all" : "scale/toggle", adata);
+                output->call_plugin(
+                    all_workspaces ? "scale/toggle_all" : "scale/toggle", adata);
             }
 
             delete idle_call;
         });
 
-        g_dbus_method_invocation_return_value(invocation,
-                                              nullptr);
+        g_dbus_method_invocation_return_value(invocation, nullptr);
     }
 
     /*************** Non-reffing actions at end ****************/
@@ -1115,12 +1102,10 @@ handle_method_call (GDBusConnection* connection,
          * and restore it if different from
          * "default"
          */
-        if (enable)
-        {
+        if (enable) {
             for (wf::output_t* output : wf_outputs)
             {
-                if (!output->activate_plugin(grab_interfaces[output]))
-                {
+                if (!output->activate_plugin(grab_interfaces[output])) {
                     continue;
                 }
 
@@ -1150,8 +1135,7 @@ handle_method_call (GDBusConnection* connection,
             });
         }
 
-        g_dbus_method_invocation_return_value(invocation,
-                                              nullptr);
+        g_dbus_method_invocation_return_value(invocation, nullptr);
 
         return;
     }
@@ -1166,11 +1150,8 @@ handle_method_call (GDBusConnection* connection,
         GVariant* value;
 
         cursor_position = core.get_active_output()->get_cursor_position();
-        value = g_variant_new("(dd)",
-                              cursor_position.x,
-                              cursor_position.y);
-        g_dbus_method_invocation_return_value(invocation,
-                                              value);
+        value = g_variant_new("(dd)", cursor_position.x, cursor_position.y);
+        g_dbus_method_invocation_return_value(invocation, value);
 
         return;
     }
@@ -1188,8 +1169,7 @@ handle_method_call (GDBusConnection* connection,
         }
 
         value = g_variant_new("(au)", &builder);
-        g_dbus_method_invocation_return_value(invocation,
-                                              value);
+        g_dbus_method_invocation_return_value(invocation, value);
 
         return;
     }
@@ -1218,8 +1198,7 @@ handle_method_call (GDBusConnection* connection,
         }
 
         value = g_variant_new("(au)", &builder);
-        g_dbus_method_invocation_return_value(invocation,
-                                              value);
+        g_dbus_method_invocation_return_value(invocation, value);
 
         return;
     }
@@ -1235,8 +1214,7 @@ handle_method_call (GDBusConnection* connection,
         for (auto it = begin(view_vector); it != end(view_vector); ++it)
         {
             if ((it->get()->role != wf::VIEW_ROLE_TOPLEVEL) ||
-                !it->get()->is_mapped())
-            {
+                !it->get()->is_mapped()) {
                 continue;
             }
             else
@@ -1246,8 +1224,7 @@ handle_method_call (GDBusConnection* connection,
         }
 
         value = g_variant_new("(au)", &builder);
-        g_dbus_method_invocation_return_value(invocation,
-                                              value);
+        g_dbus_method_invocation_return_value(invocation, value);
 
         return;
     }
@@ -1260,15 +1237,13 @@ handle_method_call (GDBusConnection* connection,
         g_variant_get(parameters, "(u)", &output_id);
         wf::output_t* wf_output = get_output_from_output_id(output_id);
 
-        if (wf_output != nullptr)
-        {
+        if (wf_output != nullptr) {
             response = g_strdup_printf(wf_output->to_string().c_str());
         }
 
         g_dbus_method_invocation_return_value(invocation,
                                               g_variant_new("(s)", response));
-        if (wf_output != nullptr)
-        {
+        if (wf_output != nullptr) {
             g_free(response);
         }
 
@@ -1284,21 +1259,17 @@ handle_method_call (GDBusConnection* connection,
 
         g_variant_get(parameters, "(u)", &output_id);
         output = get_output_from_output_id(output_id);
-        if (output)
-        {
+        if (output) {
             wlr_output = output->handle;
 
-            if (wlr_output != nullptr)
-            {
+            if (wlr_output != nullptr) {
                 response = g_strdup_printf(wlr_output->make);
             }
         }
 
         g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(s)",
-                                                            response));
-        if (wlr_output != nullptr)
-        {
+                                              g_variant_new("(s)", response));
+        if (wlr_output != nullptr) {
             g_free(response);
         }
 
@@ -1314,21 +1285,17 @@ handle_method_call (GDBusConnection* connection,
 
         g_variant_get(parameters, "(u)", &output_id);
         output = get_output_from_output_id(output_id);
-        if (output)
-        {
+        if (output) {
             wlr_output = output->handle;
 
-            if (wlr_output != nullptr)
-            {
+            if (wlr_output != nullptr) {
                 response = g_strdup_printf(wlr_output->model);
             }
         }
 
         g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(s)",
-                                                            response));
-        if (wlr_output != nullptr)
-        {
+                                              g_variant_new("(s)", response));
+        if (wlr_output != nullptr) {
             g_free(response);
         }
 
@@ -1346,15 +1313,13 @@ handle_method_call (GDBusConnection* connection,
         wf_output = get_output_from_output_id(output_id);
         wlr_output = wf_output->handle;
 
-        if (wlr_output != nullptr)
-        {
+        if (wlr_output != nullptr) {
             response = g_strdup_printf(wlr_output->serial);
         }
 
         g_dbus_method_invocation_return_value(invocation,
                                               g_variant_new("(s)", response));
-        if (wlr_output != nullptr)
-        {
+        if (wlr_output != nullptr) {
             g_free(response);
         }
 
@@ -1371,17 +1336,15 @@ handle_method_call (GDBusConnection* connection,
 
         g_variant_get(parameters, "(u)", &output_id);
         wf_output = get_output_from_output_id(output_id);
-        if (wf_output)
-        {
+        if (wf_output) {
             ws = wf_output->workspace->get_current_workspace();
             horizontal_workspace = ws.x;
             vertical_workspace = ws.y;
         }
 
-        g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(uu)",
-                                                            horizontal_workspace,
-                                                            vertical_workspace));
+        g_dbus_method_invocation_return_value(
+            invocation,
+            g_variant_new("(uu)", horizontal_workspace, vertical_workspace));
 
         return;
     }
@@ -1391,10 +1354,8 @@ handle_method_call (GDBusConnection* connection,
         wf::dimensions_t workspaces;
         workspaces = core.get_active_output()->workspace->get_workspace_grid_size();
 
-        g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(ii)",
-                                                            workspaces.width,
-                                                            workspaces.height));
+        g_dbus_method_invocation_return_value(
+            invocation, g_variant_new("(ii)", workspaces.width, workspaces.height));
 
         return;
     }
@@ -1410,8 +1371,19 @@ handle_method_call (GDBusConnection* connection,
         int view_above = -1;
         std::vector<wayfire_view> workspace_views;
 
-        if (!check_view_toplevel(view))
+        if (!check_view_toplevel(view)) {
+            g_dbus_method_invocation_return_value(invocation,
+                                                  g_variant_new("(i)", view_above));
+
+            return;
+        }
+
+        while (view->parent)
         {
+            view = view->parent;
+        }
+
+        if (!check_view_toplevel(view)) {
             g_dbus_method_invocation_return_value(
                 invocation, g_variant_new("(i)", view_above));
 
@@ -1419,51 +1391,36 @@ handle_method_call (GDBusConnection* connection,
         }
 
         output = view->get_output();
-        if (!output)
-        {
-            g_dbus_method_invocation_return_value(
-                invocation, g_variant_new("(i)", view_above));
+        if (!output) {
+            g_dbus_method_invocation_return_value(invocation,
+                                                  g_variant_new("(i)", view_above));
 
             return;
         }
 
-        workspace_views = view->get_output()->workspace->get_views_in_layer(
-            wf::MIDDLE_LAYERS);
+        workspace_views =
+            output->workspace->get_views_in_layer(wf::MIDDLE_LAYERS);
 
         for (int i = 0; i < workspace_views.size() - 1; i++)
         {
             wayfire_view v = workspace_views[i];
-            if (!check_view_toplevel(v))
-            {
+            if (!check_view_toplevel(v)) {
                 continue;
             }
 
-            if (v == view)
-            {
-                if (i != 0)
-                {
-                    if (check_view_toplevel(workspace_views[i - 1]))
-                    {
+            if (v == view) {
+                if (i != 0) {
+                    if (check_view_toplevel(workspace_views[i - 1])) {
                         view_above = workspace_views[i - 1]->get_id();
                     }
 
                     break;
                 }
             }
-
-            // if (view_above != -1)
-            // {
-            // g_debug("Above %s is %s", view->get_title().c_str(),
-            // get_view_from_view_id(view_above)->get_title().c_str());
-            // }
-            // else
-            // {
-            // g_debug("No view above %s", view->get_title().c_str());
-            // }
         }
 
-        g_dbus_method_invocation_return_value(
-            invocation, g_variant_new("(i)", view_above));
+        g_dbus_method_invocation_return_value(invocation,
+                                              g_variant_new("(i)", view_above));
 
         return;
     }
@@ -1478,8 +1435,19 @@ handle_method_call (GDBusConnection* connection,
         int view_below = -1;
         std::vector<wayfire_view> workspace_views;
 
-        if (!check_view_toplevel(view))
+        if (!check_view_toplevel(view)) {
+            g_dbus_method_invocation_return_value(invocation,
+                                                  g_variant_new("(i)", view_below));
+
+            return;
+        }
+
+        while (view->parent)
         {
+            view = view->parent;
+        }
+
+        if (!check_view_toplevel(view)) {
             g_dbus_method_invocation_return_value(
                 invocation, g_variant_new("(i)", view_below));
 
@@ -1487,31 +1455,26 @@ handle_method_call (GDBusConnection* connection,
         }
 
         output = view->get_output();
-        if (!output)
-        {
-            g_dbus_method_invocation_return_value(
-                invocation, g_variant_new("(i)", view_below));
+        if (!output) {
+            g_dbus_method_invocation_return_value(invocation,
+                                                  g_variant_new("(i)", view_below));
 
             return;
         }
 
-        workspace_views = view->get_output()->workspace->get_views_in_layer(
-            wf::MIDDLE_LAYERS);
+        workspace_views =
+            output->workspace->get_views_in_layer(wf::MIDDLE_LAYERS);
 
         for (int i = 0; i < workspace_views.size() - 1; i++)
         {
             wayfire_view v = workspace_views[i];
-            if (!check_view_toplevel(v))
-            {
+            if (!check_view_toplevel(v)) {
                 continue;
             }
 
-            if (v == view)
-            {
-                if (i != workspace_views.size() - 1)
-                {
-                    if (check_view_toplevel(workspace_views[i + 1]))
-                    {
+            if (v == view) {
+                if (i != workspace_views.size() - 1) {
+                    if (check_view_toplevel(workspace_views[i + 1])) {
                         view_below = workspace_views[i + 1]->get_id();
                     }
 
@@ -1530,8 +1493,8 @@ handle_method_call (GDBusConnection* connection,
             // }
         }
 
-        g_dbus_method_invocation_return_value(
-            invocation, g_variant_new("(i)", view_below));
+        g_dbus_method_invocation_return_value(invocation,
+                                              g_variant_new("(i)", view_below));
 
         return;
     }
@@ -1554,8 +1517,7 @@ handle_method_call (GDBusConnection* connection,
 
         response = g_strdup(view->get_app_id().c_str());
         g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(s)",
-                                                            response));
+                                              g_variant_new("(s)", response));
         g_free(response);
 
         return;
@@ -1585,7 +1547,8 @@ handle_method_call (GDBusConnection* connection,
         return;
     }
     else
-    if (g_strcmp0(method_name, "query_view_app_id_xwayland_net_wm_name") == 0)
+    if (g_strcmp0(method_name, "query_view_app_id_xwayland_net_wm_name") ==
+        0)
     {
         uint view_id;
         gchar* response = "nullptr";
@@ -1595,23 +1558,19 @@ handle_method_call (GDBusConnection* connection,
         g_variant_get(parameters, "(u)", &view_id);
         view = get_view_from_view_id(view_id);
 
-        if (view)
-        {
+        if (view) {
             auto wlr_surf = view->get_wlr_surface();
-            if (!wlr_surf)
-            {
+            if (!wlr_surf) {
                 g_dbus_method_invocation_return_value(invocation,
                                                       g_variant_new("(s)", response));
 
                 return;
             }
 
-            if (wlr_surface_is_xwayland_surface(wlr_surf))
-            {
+            if (wlr_surface_is_xwayland_surface(wlr_surf)) {
                 struct wlr_xwayland_surface* xsurf;
                 xsurf = wlr_xwayland_surface_from_wlr_surface(wlr_surf);
-                if (!xsurf)
-                {
+                if (!xsurf) {
                     g_dbus_method_invocation_return_value(invocation,
                                                           g_variant_new("(s)", response));
 
@@ -1625,8 +1584,7 @@ handle_method_call (GDBusConnection* connection,
             }
         }
 
-        if (free_response)
-        {
+        if (free_response) {
             g_free(response);
         }
 
@@ -1654,8 +1612,7 @@ handle_method_call (GDBusConnection* connection,
 
         response = g_strdup_printf(view->get_title().c_str());
         g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(s)",
-                                                            response));
+                                              g_variant_new("(s)", response));
         g_free(response);
 
         return;
@@ -1673,14 +1630,12 @@ handle_method_call (GDBusConnection* connection,
             return;
         }
 
-        if (view->has_data("view-demands-attention"))
-        {
+        if (view->has_data("view-demands-attention")) {
             attention = true;
         }
 
         g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(b)",
-                                                            attention));
+                                              g_variant_new("(b)", attention));
 
         return;
     }
@@ -1690,8 +1645,7 @@ handle_method_call (GDBusConnection* connection,
         const char* xdisplay = core.get_xwayland_display().c_str();
 
         g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(s)",
-                                                            xdisplay));
+                                              g_variant_new("(s)", xdisplay));
 
         return;
     }
@@ -1704,45 +1658,36 @@ handle_method_call (GDBusConnection* connection,
         g_variant_get(parameters, "(u)", &view_id);
         view = get_view_from_view_id(view_id);
 
-        if (!view)
-        {
+        if (!view) {
             g_dbus_method_invocation_return_value(invocation,
-                                                  g_variant_new("(u)",
-                                                                0));
+                                                  g_variant_new("(u)", 0));
 
             return;
         }
 
-        if (xwayland_enabled == 1)
-        {
+        if (xwayland_enabled == 1) {
             auto main_wlr_surface = view->get_main_surface()->get_wlr_surface();
-            if (!main_wlr_surface)
-            {
+            if (!main_wlr_surface) {
                 g_dbus_method_invocation_return_value(invocation,
-                                                      g_variant_new("(u)",
-                                                                    0));
+                                                      g_variant_new("(u)", 0));
 
                 return;
             }
 
-            if (wlr_surface_is_xwayland_surface(main_wlr_surface))
-            {
+            if (wlr_surface_is_xwayland_surface(main_wlr_surface)) {
 #ifdef DBUS_PLUGIN_DEBUG
-                LOG(wf::log::LOG_LEVEL_DEBUG,
-                    "xwayland is the surface type.");
+                LOG(wf::log::LOG_LEVEL_DEBUG, "xwayland is the surface type.");
 #endif
                 struct wlr_xwayland_surface* main_xsurf;
                 main_xsurf = wlr_xwayland_surface_from_wlr_surface(main_wlr_surface);
-                g_dbus_method_invocation_return_value(invocation,
-                                                      g_variant_new("(u)",
-                                                                    main_xsurf->window_id));
+                g_dbus_method_invocation_return_value(
+                    invocation, g_variant_new("(u)", main_xsurf->window_id));
 
                 return;
             }
         }
 
-        g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(u)", 0));
+        g_dbus_method_invocation_return_value(invocation, g_variant_new("(u)", 0));
 
         return;
     }
@@ -1757,31 +1702,25 @@ handle_method_call (GDBusConnection* connection,
         g_variant_get(parameters, "(us)", &view_id, &atom_name);
         view = get_view_from_view_id(view_id);
 
-        if (!view)
-        {
+        if (!view) {
             g_dbus_method_invocation_return_value(invocation,
-                                                  g_variant_new("(u)",
-                                                                0));
+                                                  g_variant_new("(u)", 0));
 
             return;
         }
 
         auto main_wlr_surface = view->get_main_surface()->get_wlr_surface();
-        if (!main_wlr_surface)
-        {
+        if (!main_wlr_surface) {
             g_dbus_method_invocation_return_value(invocation,
-                                                  g_variant_new("(u)",
-                                                                0));
+                                                  g_variant_new("(u)", 0));
 
             return;
         }
 
         if ((xwayland_enabled != 1) ||
-            !wlr_surface_is_xwayland_surface(main_wlr_surface))
-        {
+            !wlr_surface_is_xwayland_surface(main_wlr_surface)) {
             g_dbus_method_invocation_return_value(invocation,
-                                                  g_variant_new("(u)",
-                                                                0));
+                                                  g_variant_new("(u)", 0));
 
             return;
         }
@@ -1797,57 +1736,45 @@ handle_method_call (GDBusConnection* connection,
         xcb_intern_atom_reply_t* reply;
         atom_cookie = xcb_intern_atom(conn, 0, strlen(atom_name), atom_name);
         reply = xcb_intern_atom_reply(conn, atom_cookie, NULL);
-        if (reply != NULL)
-        {
+        if (reply != NULL) {
             atom = reply->atom;
             free(reply);
         }
         else
         {
 #ifdef DBUS_PLUGIN_DEBUG
-            LOG(wf::log::LOG_LEVEL_DEBUG,
-                "reply for querying the atom is empty.");
+            LOG(wf::log::LOG_LEVEL_DEBUG, "reply for querying the atom is empty.");
 #endif
-            g_dbus_method_invocation_return_value(invocation,
-                                                  g_variant_new("(u)",
-                                                                atom_value_cardinal));
+            g_dbus_method_invocation_return_value(
+                invocation, g_variant_new("(u)", atom_value_cardinal));
 
             return;
         }
 
         xcb_get_property_cookie_t reply_cookie;
         xcb_get_property_reply_t* reply_value;
-        reply_cookie = xcb_get_property(conn,
-                                        0,
-                                        main_xsurf->window_id,
-                                        atom,
-                                        XCB_ATOM_ANY,
-                                        0,
-                                        2048);
+        reply_cookie = xcb_get_property(conn, 0, main_xsurf->window_id, atom,
+                                        XCB_ATOM_ANY, 0, 2048);
         reply_value = xcb_get_property_reply(conn, reply_cookie, NULL);
         xcb_disconnect(conn);
 
-        if (reply_value->type == XCB_ATOM_CARDINAL)
-        {
+        if (reply_value->type == XCB_ATOM_CARDINAL) {
             uint* uvalue = (uint*)xcb_get_property_value(reply_value);
             atom_value_cardinal = *uvalue;
 #ifdef DBUS_PLUGIN_DEBUG
-            LOG(wf::log::LOG_LEVEL_DEBUG,
-                "value to uint.", atom_value_cardinal);
+            LOG(wf::log::LOG_LEVEL_DEBUG, "value to uint.", atom_value_cardinal);
 #endif
         }
 
 #ifdef DBUS_PLUGIN_DEBUG
         else
         {
-            LOG(wf::log::LOG_LEVEL_DEBUG,
-                "requested value is not a cardinal");
+            LOG(wf::log::LOG_LEVEL_DEBUG, "requested value is not a cardinal");
         }
 #endif
 
-        g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(u)",
-                                                            atom_value_cardinal));
+        g_dbus_method_invocation_return_value(
+            invocation, g_variant_new("(u)", atom_value_cardinal));
 
         return;
     }
@@ -1862,32 +1789,26 @@ handle_method_call (GDBusConnection* connection,
 
         wayfire_view view = get_view_from_view_id(view_id);
 
-        if (!view)
-        {
-            g_dbus_method_invocation_return_value(invocation,
-                                                  g_variant_new("(s)",
-                                                                "View not found."));
+        if (!view) {
+            g_dbus_method_invocation_return_value(
+                invocation, g_variant_new("(s)", "View not found."));
 
             return;
         }
 
         auto main_wlr_surface = view->get_main_surface()->get_wlr_surface();
 
-        if (!main_wlr_surface)
-        {
-            g_dbus_method_invocation_return_value(invocation,
-                                                  g_variant_new("(s)",
-                                                                "main_wlr_surface not found."));
+        if (!main_wlr_surface) {
+            g_dbus_method_invocation_return_value(
+                invocation, g_variant_new("(s)", "main_wlr_surface not found."));
 
             return;
         }
 
         if ((xwayland_enabled != 1) ||
-            !wlr_surface_is_xwayland_surface(main_wlr_surface))
-        {
-            g_dbus_method_invocation_return_value(invocation,
-                                                  g_variant_new("(s)",
-                                                                "Not an xwayland surface."));
+            !wlr_surface_is_xwayland_surface(main_wlr_surface)) {
+            g_dbus_method_invocation_return_value(
+                invocation, g_variant_new("(s)", "Not an xwayland surface."));
 
             return;
         }
@@ -1904,53 +1825,43 @@ handle_method_call (GDBusConnection* connection,
         xcb_intern_atom_reply_t* reply;
         atom_cookie = xcb_intern_atom(conn, 0, strlen(atom_name), atom_name);
         reply = xcb_intern_atom_reply(conn, atom_cookie, NULL);
-        if (reply != NULL)
-        {
+        if (reply != NULL) {
             atom = reply->atom;
             free(reply);
         }
         else
         {
-            g_dbus_method_invocation_return_value(invocation,
-                                                  g_variant_new("(s)",
-                                                                "reply for querying the atom is empty."));
+            g_dbus_method_invocation_return_value(
+                invocation,
+                g_variant_new("(s)", "reply for querying the atom is empty."));
 
             return;
         }
 
-        xcb_get_property_cookie_t reply_cookie = xcb_get_property(conn,
-                                                                  0,
-                                                                  main_xsurf->window_id,
-                                                                  atom,
-                                                                  XCB_ATOM_ANY,
-                                                                  0,
-                                                                  2048);
-        xcb_get_property_reply_t* reply_value = xcb_get_property_reply(conn,
-                                                                       reply_cookie,
-                                                                       NULL);
+        xcb_get_property_cookie_t reply_cookie = xcb_get_property(
+            conn, 0, main_xsurf->window_id, atom, XCB_ATOM_ANY, 0, 2048);
+        xcb_get_property_reply_t* reply_value =
+            xcb_get_property_reply(conn, reply_cookie, NULL);
 
         char* value = static_cast<char*> (xcb_get_property_value(reply_value));
 
         xcb_disconnect(conn);
 
-        if (reply_value->type != XCB_ATOM_CARDINAL)
-        {
+        if (reply_value->type != XCB_ATOM_CARDINAL) {
             atom_value_string = value;
 #ifdef DBUS_PLUGIN_DEBUG
-            LOG(wf::log::LOG_LEVEL_DEBUG,
-                "value to char.", atom_value_string);
+            LOG(wf::log::LOG_LEVEL_DEBUG, "value to char.", atom_value_string);
 #endif
-            g_dbus_method_invocation_return_value(invocation,
-                                                  g_variant_new("(s)",
-                                                                atom_value_string));
+            g_dbus_method_invocation_return_value(
+                invocation, g_variant_new("(s)", atom_value_string));
 
             return;
         }
         else
         {
-            g_dbus_method_invocation_return_value(invocation,
-                                                  g_variant_new("(s)",
-                                                                "XCB_ATOM_CARDINAL type requested."));
+            g_dbus_method_invocation_return_value(
+                invocation,
+                g_variant_new("(s)", "XCB_ATOM_CARDINAL type requested."));
 
             return;
         }
@@ -1967,33 +1878,23 @@ handle_method_call (GDBusConnection* connection,
         g_variant_get(parameters, "(u)", &view_id);
         view = get_view_from_view_id(view_id);
 
-        if (!view)
-        {
+        if (!view) {
             g_dbus_method_invocation_return_value(invocation,
-                                                  g_variant_new("(iuu)",
-                                                                0,
-                                                                0,
-                                                                0));
+                                                  g_variant_new("(iuu)", 0, 0, 0));
 
             return;
         }
 
-        if (xwayland_enabled == 1)
-        {
+        if (xwayland_enabled == 1) {
             auto main_surface = view->get_main_surface()->get_wlr_surface();
-            if (!main_surface)
-            {
+            if (!main_surface) {
                 g_dbus_method_invocation_return_value(invocation,
-                                                      g_variant_new("(iuu)",
-                                                                    0,
-                                                                    0,
-                                                                    0));
+                                                      g_variant_new("(iuu)", 0, 0, 0));
 
                 return;
             }
 
-            if (wlr_surface_is_xwayland_surface(main_surface))
-            {
+            if (wlr_surface_is_xwayland_surface(main_surface)) {
                 struct wlr_xwayland_surface* main_xsurf;
                 xcb_res_client_id_spec_t spec = {0};
                 xcb_generic_error_t* err = NULL;
@@ -2001,8 +1902,7 @@ handle_method_call (GDBusConnection* connection,
                 xcb_res_query_client_ids_reply_t* reply;
                 int screen;
 
-                const char* xdisplay =
-                    core.get_xwayland_display().c_str();
+                const char* xdisplay = core.get_xwayland_display().c_str();
                 xcb_connection_t* conn = xcb_connect(xdisplay, &screen);
 
                 main_xsurf = wlr_xwayland_surface_from_wlr_surface(main_surface);
@@ -2011,8 +1911,7 @@ handle_method_call (GDBusConnection* connection,
                 cookie = xcb_res_query_client_ids(conn, 1, &spec);
                 reply = xcb_res_query_client_ids_reply(conn, cookie, &err);
 
-                if (reply == NULL)
-                {
+                if (reply == NULL) {
 #ifdef DBUS_PLUGIN_DEBUG
                     LOG(wf::log::LOG_LEVEL_DEBUG,
                         "could not get pid from xserver, empty reply");
@@ -2025,8 +1924,7 @@ handle_method_call (GDBusConnection* connection,
                     for (; it.rem; xcb_res_client_id_value_next(&it))
                     {
                         spec = it.data->spec;
-                        if (spec.mask & XCB_RES_CLIENT_ID_MASK_LOCAL_CLIENT_PID)
-                        {
+                        if (spec.mask & XCB_RES_CLIENT_ID_MASK_LOCAL_CLIENT_PID) {
                             pid = *xcb_res_client_id_value_value(it.data);
                             break;
                         }
@@ -2037,15 +1935,11 @@ handle_method_call (GDBusConnection* connection,
 
                 xcb_disconnect(conn);
 
-                if (pid != 0)
-                {
+                if (pid != 0) {
                     LOG(wf::log::LOG_LEVEL_DEBUG,
                         "returning xwayland window credentials.");
-                    g_dbus_method_invocation_return_value(invocation,
-                                                          g_variant_new("(iuu)",
-                                                                        pid,
-                                                                        uid,
-                                                                        gid));
+                    g_dbus_method_invocation_return_value(
+                        invocation, g_variant_new("(iuu)", pid, uid, gid));
 
                     return;
                 }
@@ -2055,15 +1949,9 @@ handle_method_call (GDBusConnection* connection,
 #ifdef DBUS_PLUGIN_DEBUG
         LOG(wf::log::LOG_LEVEL_DEBUG, "returning standard credentials.");
 #endif
-        wl_client_get_credentials(view->get_client(),
-                                  &pid,
-                                  &uid,
-                                  &gid);
-        g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(iuu)",
-                                                            pid,
-                                                            uid,
-                                                            gid));
+        wl_client_get_credentials(view->get_client(), &pid, &uid, &gid);
+        g_dbus_method_invocation_return_value(
+            invocation, g_variant_new("(iuu)", pid, uid, gid));
 
         return;
     }
@@ -2078,10 +1966,8 @@ handle_method_call (GDBusConnection* connection,
         view = get_view_from_view_id(view_id);
         above = false;
 
-        if (view)
-        {
-            if (view->has_data("wm-actions-above"))
-            {
+        if (view) {
+            if (view->has_data("wm-actions-above")) {
                 above = true;
             }
         }
@@ -2093,8 +1979,7 @@ handle_method_call (GDBusConnection* connection,
         }
 #endif
         g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(b)",
-                                                            above));
+                                              g_variant_new("(b)", above));
 
         return;
     }
@@ -2108,8 +1993,7 @@ handle_method_call (GDBusConnection* connection,
         g_variant_get(parameters, "(u)", &view_id);
         view = get_view_from_view_id(view_id);
 
-        if (view)
-        {
+        if (view) {
             response = (view->tiled_edges == wf::TILED_EDGES_ALL);
         }
 
@@ -2120,8 +2004,7 @@ handle_method_call (GDBusConnection* connection,
         }
 #endif
         g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(b)",
-                                                            response));
+                                              g_variant_new("(b)", response));
 
         return;
     }
@@ -2136,8 +2019,7 @@ handle_method_call (GDBusConnection* connection,
         g_variant_get(parameters, "(u)", &view_id);
         view = get_view_from_view_id(view_id);
 
-        if (view)
-        {
+        if (view) {
             response = view->activated;
         }
 
@@ -2148,8 +2030,7 @@ handle_method_call (GDBusConnection* connection,
         }
 #endif
         g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(b)",
-                                                            response));
+                                              g_variant_new("(b)", response));
 
         return;
     }
@@ -2164,8 +2045,7 @@ handle_method_call (GDBusConnection* connection,
         g_variant_get(parameters, "(u)", &view_id);
         view = get_view_from_view_id(view_id);
 
-        if (view)
-        {
+        if (view) {
             response = view->minimized;
         }
 
@@ -2176,8 +2056,7 @@ handle_method_call (GDBusConnection* connection,
         }
 #endif
         g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(b)",
-                                                            response));
+                                              g_variant_new("(b)", response));
 
         return;
     }
@@ -2192,8 +2071,7 @@ handle_method_call (GDBusConnection* connection,
         g_variant_get(parameters, "(u)", &view_id);
         view = get_view_from_view_id(view_id);
 
-        if (view)
-        {
+        if (view) {
             response = view->fullscreen;
         }
 
@@ -2204,8 +2082,7 @@ handle_method_call (GDBusConnection* connection,
         }
 #endif
         g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(b)",
-                                                            response));
+                                              g_variant_new("(b)", response));
 
         return;
     }
@@ -2219,10 +2096,8 @@ handle_method_call (GDBusConnection* connection,
         g_variant_get(parameters, "(u)", &view_id);
         view = get_view_from_view_id(view_id);
 
-        if (view)
-        {
-            if (view->get_output())
-            {
+        if (view) {
+            if (view->get_output()) {
                 output_id = view->get_output()->get_id();
             }
 
@@ -2236,8 +2111,7 @@ handle_method_call (GDBusConnection* connection,
         }
 
         g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(u)",
-                                                            output_id));
+                                              g_variant_new("(u)", output_id));
 
         return;
     }
@@ -2261,8 +2135,7 @@ handle_method_call (GDBusConnection* connection,
         g_variant_get(parameters, "(u)", &view_id);
         wayfire_view view = get_view_from_view_id(view_id);
 
-        if (!check_view_toplevel(view))
-        {
+        if (!check_view_toplevel(view)) {
 #ifdef DBUS_PLUGIN_DEBUG
 
             LOG(wf::log::LOG_LEVEL_DEBUG, "query_view_workspaces no view");
@@ -2279,17 +2152,14 @@ handle_method_call (GDBusConnection* connection,
 
         g_variant_builder_init(&builder, G_VARIANT_TYPE("a(ii)"));
 
-        for (int horizontal_workspace = 0;
-             horizontal_workspace < workspaces.width;
+        for (int horizontal_workspace = 0; horizontal_workspace < workspaces.width;
              horizontal_workspace++)
         {
-            for (int vertical_workspace = 0;
-                 vertical_workspace < workspaces.height;
+            for (int vertical_workspace = 0; vertical_workspace < workspaces.height;
                  vertical_workspace++)
             {
                 wf::point_t ws = {horizontal_workspace, vertical_workspace};
-                if (output->workspace->view_visible_on(view, ws))
-                {
+                if (output->workspace->view_visible_on(view, ws)) {
                     workspace_relative_geometry = output->render->get_ws_box(ws);
                     intersection = wf::geometry_intersection(view_relative_geometry,
                                                              workspace_relative_geometry);
@@ -2297,10 +2167,8 @@ handle_method_call (GDBusConnection* connection,
                     area /= 1.0 * view_relative_geometry.width *
                         view_relative_geometry.height;
 
-                    if (area > 0.1)
-                    {
-                        g_variant_builder_add(&builder, "(ii)",
-                                              horizontal_workspace,
+                    if (area > 0.1) {
+                        g_variant_builder_add(&builder, "(ii)", horizontal_workspace,
                                               vertical_workspace);
                     }
                 }
@@ -2323,8 +2191,7 @@ handle_method_call (GDBusConnection* connection,
         group_leader_view_id = view_id;
         view = get_view_from_view_id(view_id);
 
-        if (view)
-        {
+        if (view) {
             while (view->parent)
             {
                 view = view->parent;
@@ -2336,9 +2203,8 @@ handle_method_call (GDBusConnection* connection,
 #endif
         }
 
-        g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(u)",
-                                                            group_leader_view_id));
+        g_dbus_method_invocation_return_value(
+            invocation, g_variant_new("(u)", group_leader_view_id));
 
         return;
     }
@@ -2353,15 +2219,11 @@ handle_method_call (GDBusConnection* connection,
         g_variant_get(parameters, "(u)", &view_id);
         view = get_view_from_view_id(view_id);
 
-        if (view)
-        {
-            if (view->is_mapped())
-            {
+        if (view) {
+            if (view->is_mapped()) {
                 is_modal_dialog = view->has_data("gtk-shell-modal");
 
-                if ((view->role == wf::VIEW_ROLE_TOPLEVEL) &&
-                    !is_modal_dialog)
-                {
+                if ((view->role == wf::VIEW_ROLE_TOPLEVEL) && !is_modal_dialog) {
                     response = 1;
                 }
 
@@ -2380,8 +2242,7 @@ handle_method_call (GDBusConnection* connection,
         }
 
         g_dbus_method_invocation_return_value(invocation,
-                                              g_variant_new("(u)",
-                                                            response));
+                                              g_variant_new("(u)", response));
 
         return;
     }
@@ -2394,25 +2255,27 @@ handle_method_call (GDBusConnection* connection,
         g_variant_get(parameters, "(u)", &view_id);
         view = get_view_from_view_id(view_id);
 
-        auto wlr_surf = view->get_wlr_surface();
-        if (!wlr_surf)
+        if (!check_view_toplevel(view))
         {
             g_dbus_method_invocation_return_value(invocation,
-                                                  g_variant_new("(uu)",
-                                                                0,
-                                                                0));
+                                                  g_variant_new("(uu)", 0, 0));
 
             return;
         }
 
-        if (wlr_surface_is_xwayland_surface(wlr_surf))
-        {
+        auto wlr_surf = view->get_wlr_surface();
+        if (!wlr_surf) {
+            g_dbus_method_invocation_return_value(invocation,
+                                                  g_variant_new("(uu)", 0, 0));
+
+            return;
+        }
+
+        if (wlr_surface_is_xwayland_surface(wlr_surf)) {
             struct wlr_xwayland_surface* xsurf;
             xsurf = wlr_xwayland_surface_from_wlr_surface(wlr_surf);
-            g_dbus_method_invocation_return_value(invocation,
-                                                  g_variant_new("(uu)",
-                                                                xsurf->width,
-                                                                xsurf->height));
+            g_dbus_method_invocation_return_value(
+                invocation, g_variant_new("(uu)", xsurf->width, xsurf->height));
         }
 
         return;
@@ -2446,8 +2309,7 @@ handle_get_property (GDBusConnection* connection,
                      const gchar* sender,
                      const gchar* object_path,
                      const gchar* interface_name,
-                     const gchar* property_name,
-                     GError** error,
+                     const gchar* property_name, GError** error,
                      gpointer user_data)
 {
     // returning nullptr would crash compositor
@@ -2475,39 +2337,35 @@ handle_set_property (GDBusConnection* connection,
                      const gchar* sender,
                      const gchar* object_path,
                      const gchar* interface_name,
-                     const gchar* property_name,
-                     GVariant* value,
-                     GError** error,
-                     gpointer user_data)
+                     const gchar* property_name, GVariant* value,
+                     GError** error, gpointer user_data)
 {
     /* unused */
     return false;
 }
 
-static const GDBusInterfaceVTable interface_vtable =
-{
-    handle_method_call,
-    handle_get_property,
-    handle_set_property,
-    {0}
+static const GDBusInterfaceVTable interface_vtable = {
+    handle_method_call, handle_get_property, handle_set_property, {0}
 };
 
 static gboolean
 bus_emit_signal (gchar* signal_name, GVariant* signal_data)
 {
-    GError* local_error = nullptr;
-
-    g_dbus_connection_emit_signal(dbus_connection,
-                                  nullptr,
-                                  "/org/wayland/compositor",
-                                  "org.wayland.compositor",
-                                  signal_name,
-                                  signal_data,
-                                  &local_error);
+    GError* local_error = NULL;
+    if (!dbus_connection) {
+        if (signal_data != nullptr) {
+            g_variant_unref(signal_data);
+        }
+
+        return true;
+    }
+
+    g_dbus_connection_emit_signal(
+        dbus_connection, nullptr, "/org/wayland/compositor",
+        "org.wayland.compositor", signal_name, signal_data, &local_error);
     g_assert_no_error(local_error);
 
-    if (signal_data != nullptr)
-    {
+    if (signal_data != nullptr) {
         g_variant_unref(signal_data);
     }
 
@@ -2515,41 +2373,32 @@ bus_emit_signal (gchar* signal_name, GVariant* signal_data)
 }
 
 static void
-on_bus_acquired (GDBusConnection* connection,
-                 const gchar* name,
+on_bus_acquired (GDBusConnection* connection, const gchar* name,
                  gpointer user_data)
 {
     uint registration_id;
 
     dbus_connection = connection;
-    registration_id =
-        g_dbus_connection_register_object(connection,
-                                          "/org/wayland/compositor",
-                                          introspection_data->interfaces[0],
-                                          &interface_vtable,
-                                          nullptr,
-                                          nullptr,
-                                          nullptr);
+    registration_id = g_dbus_connection_register_object(
+        connection, "/org/wayland/compositor", introspection_data->interfaces[0],
+        &interface_vtable, nullptr, nullptr, nullptr);
 #ifdef DBUS_PLUGIN_DEBUG
     LOG(wf::log::LOG_LEVEL_DEBUG, "Acquired the Bus");
 #endif
 }
 
 static void
-on_name_acquired (GDBusConnection* connection,
-                  const gchar* name,
+on_name_acquired (GDBusConnection* connection, const gchar* name,
                   gpointer user_data)
 {
 #ifdef DBUS_PLUGIN_DEBUG
     LOG(wf::log::LOG_LEVEL_DEBUG,
-        "Acquired the name " + std::string(name) +
-        "on the session bus\n");
+        "Acquired the name " + std::string(name) + "on the session bus\n");
 #endif
 }
 
 static void
-on_name_lost (GDBusConnection* connection,
-              const gchar* name,
+on_name_lost (GDBusConnection* connection, const gchar* name,
               gpointer user_data)
 {
 #ifdef DBUS_PLUGIN_DEBUG
@@ -2561,54 +2410,11 @@ on_name_lost (GDBusConnection* connection,
 static void
 acquire_bus ()
 {
-    // Fail if not available - Do *not* try to replace;
-    // E.g if running wayfire and starting a nested wayfire
-    // in the future it could be possible to have a seperate
-    // object path if a nested compostor is running
-    // see TODO's
-
     GBusNameOwnerFlags flags;
-    flags = G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE;
-    introspection_data = g_dbus_node_info_new_for_xml(introspection_xml,
-                                                      nullptr);
-
-    owner_id = g_bus_own_name(G_BUS_TYPE_SESSION,
-                              "org.wayland.compositor",
-                              flags,
-                              on_bus_acquired,
-                              on_name_acquired,
-                              on_name_lost,
-                              nullptr,
-                              nullptr);
-
-    /*
-     * TODO: figure out why it crashes without this line
-     * guess would be lifetime of some object.
-     */
-    g_print("Increase this later: 42");
-}
-
-static gpointer
-dbus_thread_exec_function (gpointer user_data)
-{
-#ifdef DBUS_PLUGIN_DEBUG
-    LOG(wf::log::LOG_LEVEL_DEBUG, "dbus_thread_exec_function start");
-#endif
-
-    GMainContext* dbus_context;
-    dbus_context = static_cast<GMainContext*> (user_data);
-    g_main_context_push_thread_default(dbus_context);
-    dbus_event_loop = g_main_loop_new(dbus_context, FALSE);
-    g_main_loop_run(dbus_event_loop);
-
-    /*
-     * Event loop is killed, probably dbus plugin is
-     * being unloaded
-     */
-#ifdef DBUS_PLUGIN_DEBUG
-    LOG(wf::log::LOG_LEVEL_DEBUG, "If you are here either dbus plugin");
-    LOG(wf::log::LOG_LEVEL_DEBUG, "is being deactivated or this is a bug.");
-#endif
+// flags = G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE;
+    introspection_data = g_dbus_node_info_new_for_xml(introspection_xml, nullptr);
 
-    return nullptr;
-}
\ No newline at end of file
+    owner_id = g_bus_own_name(G_BUS_TYPE_SESSION, "org.wayland.compositor", flags,
+                              on_bus_acquired, on_name_acquired, on_name_lost,
+                              nullptr, nullptr);
+}
diff --git a/subprojects/dbus/meson.build b/subprojects/dbus/meson.build
index 8c8e527..3d50ae3 100644
--- a/subprojects/dbus/meson.build
+++ b/subprojects/dbus/meson.build
@@ -22,9 +22,9 @@ glib = dependency('glib-2.0')
 xcb = dependency('xcb')
 xcbres = dependency('xcb-res')
 
-
 add_project_arguments(['-DWLR_USE_UNSTABLE'], language: ['cpp', 'c'])
 add_project_arguments(['-DWAYFIRE_PLUGIN'], language: ['cpp', 'c'])
+add_project_arguments(['-Wno-unused-parameter'], language: 'cpp')
 add_project_link_arguments(['-rdynamic'], language:'cpp')
 
 
diff --git a/subprojects/dbus/org.wayland.compositor.dbus.gschema.xml b/subprojects/dbus/org.wayland.compositor.dbus.gschema.xml
index 9723ee1..0a03b13 100644
--- a/subprojects/dbus/org.wayland.compositor.dbus.gschema.xml
+++ b/subprojects/dbus/org.wayland.compositor.dbus.gschema.xml
@@ -6,5 +6,10 @@
       <summary>geometry-signal</summary>
       <description>geometry-signal</description>
     </key>
+    <key type="s" name="startup-notify">
+      <default>""</default>
+      <summary>Command that runs on session startup</summary>
+      <description>Command that runs on session startup</description>
+    </key>    
   </schema>
 </schemalist>
diff --git a/subprojects/dbus/wf-prop.cpp b/subprojects/dbus/wf-prop.cpp
index 90e1db2..4bb9549 100644
--- a/subprojects/dbus/wf-prop.cpp
+++ b/subprojects/dbus/wf-prop.cpp
@@ -6,10 +6,7 @@
 #define DBUS_ID "org.wayland.compositor"
 #define DBUS_PATH "/org/wayland/compositor"
 
-extern "C" {
 #include <gio/gio.h>
-};
-
 #include <giomm/application.h>
 #include <giomm/dbusconnection.h>
 #include <giomm/dbusproxy.h>
@@ -237,6 +234,23 @@ query_view_role (uint view_id)
     return value;
 }
 
+static uint
+query_view_group_leader (uint view_id)
+{
+    GError* error = NULL;
+    GVariant* tmp = NULL;
+    uint value;
+
+    tmp = g_dbus_proxy_call_sync(proxy->gobj(), "query_view_group_leader",
+                                 g_variant_new("(u)", view_id),
+                                 G_DBUS_CALL_FLAGS_NONE, -1, NULL, &error);
+    g_assert_no_error(error);
+    g_variant_get(tmp, "(u)", &value);
+    g_variant_unref(tmp);
+
+    return value;
+}
+
 static gchar*
 query_view_app_id (uint view_id)
 {
@@ -376,6 +390,8 @@ print_view_data (guint view_id)
     gchar* output_name = query_output_name(output);
     guint xwid = query_view_xwayland_wid(view_id);
     guint role = query_view_role(view_id);
+    guint group_leader = query_view_group_leader(view_id);
+
     std::vector<std::pair<int, int>> workspaces = query_view_workspaces(view_id);
     GError* error = NULL;
     GVariant* tmp = NULL;
@@ -410,6 +426,7 @@ print_view_data (guint view_id)
         g_print("Role:              %s\n", "Unknown");
     }
 
+    g_print("Group Leader:      %i\n", group_leader);
     g_print("Process id:        %i\n", pid);
     g_print("User id:           %u\n", uid);
     g_print("Group id:          %u\n", gid);
@@ -542,9 +559,9 @@ main (int argc, char* argv [])
                 g_variant_iter_init(&iter2, child);
                 while ((cchild = g_variant_iter_next_value(&iter2)))
                 {
-                  g_print("***************************************\n");
-                  print_view_data(g_variant_get_uint32(cchild));
-                  g_print("***************************************\n\n");
+                    g_print("***************************************\n");
+                    print_view_data(g_variant_get_uint32(cchild));
+                    g_print("***************************************\n\n");
                 }
             }
 
@@ -566,4 +583,4 @@ main (int argc, char* argv [])
                            g_variant_new("(b)", TRUE), G_DBUS_CALL_FLAGS_NONE, -1,
                            NULL, &error);
     g_main_loop_run(loop);
-}
\ No newline at end of file
+}
